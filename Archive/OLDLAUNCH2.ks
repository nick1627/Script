//Launch.

PRINT "LAUNCH SEQUENCE INITIATED.".

//Pre flight procedures.
SAS OFF.
LOCK THROTTLE TO 1.0.

//start countdown.
PRINT "COUNTING DOWN...".
PRINT "T - 5".
FROM {LOCAL COUNT IS 4.} UNTIL COUNT = 0 STEP {SET COUNT TO COUNT -1.} DO {
	PRINT COUNT.
	WAIT 1.
}

//Launch
LOCK STEERING TO HEADING(90, 90).
STAGE.
PRINT "WE HAVE LIFTOFF".

//ascend to 1000m
UNTIL SHIP:ALTITUDE > 1000{
    IF CHECKSTAGEREQUIRED{
		PRINT "STAGING.".
		STAGE.
	}
}

//start gravity turn
PRINT "COMMENCING GRAVITY TURN".

LOCAL PITCH IS 90.
UNTIL SHIP:ALTITUDE > 10000 {
	SET PITCH TO ((-0.005*(SHIP:ALTITUDE)) + 95).
	LOCK STEERING TO HEADING(90, PITCH).

    IF CHECKSTAGEREQUIRED{
		PRINT "STAGING.".
		STAGE.
	}
}

LOCK STEERING TO HEADING(90, 45).
PRINT "GRAVITY TURN COMPLETE".


UNTIL SHIP:APOAPSIS >= 75000{
    IF CHECKSTAGEREQUIRED{
		PRINT "STAGING.".
		STAGE.
	}
}

LOCK THROTTLE TO 0.0.

PRINT "TARGET APOAPSIS REACHED".

PRINT "COASTING . . .".

UNLOCK STEERING.

SAS ON.

WAIT 1.

SET SASMODE TO "PROGRADE".

WAIT UNTIL SHIP:ALTITUDE>70000.

SAS OFF.

PRINT "CALCULATING CIRCULARISATION BURN".
//calculate target velocity (speed at apoapsis)
SET TARGETVELOCITY TO ((CONSTANT:G*KERBIN:MASS)/(600000+SHIP:APOAPSIS))^0.5.
//Now calculate speed at apoapsis
//calculate current orbit energy
LOCAL E IS (0.5*(SHIP:VELOCITY:ORBIT:MAG)^2)-(CONSTANT:G * KERBIN:MASS/(SHIP:ALTITUDE+KERBIN:RADIUS)).
//calculate velocity at current apoapsis before burning
LOCAL APOAPSISVELOCITY IS VELOCITYAT(SHIP,(TIME + ETA:APOAPSIS)):ORBIT:MAG.
//calculate change in velocity required.
LOCAL DELTAV IS TARGETVELOCITY - APOAPSISVELOCITY. 


SET CIRCMANOEUVRE TO NODE(TIME:SECONDS + ETA:APOAPSIS, 0, 0, DELTAV).
ADD CIRCMANOEUVRE.

//FIND ISP
LOCAL ISP IS GETISPOFCURRENTENGINES().
//FIND THRUST.
LOCAL THRUST IS GETCURRENTMAXTHRUST().

//FIND BURNTIME.

LOCAL BURNTIME IS GETBURNTIME(DELTAV, ISP, THRUST).
PRINT "BURNTIME: " + BURNTIME.

PRINT "POINTING ALONG BURN VECTOR".
LOCK STEERING TO CIRCMANOEUVRE:BURNVECTOR.

WAIT UNTIL TIME:SECONDS >= TIME:SECONDS + CIRCMANOEUVRE:ETA - (BURNTIME/2).
PRINT "COMMENCING CIRCULARISATION BURN".
LOCAL OLDECCENTRICITY IS ((SHIP:APOAPSIS + KERBIN:RADIUS)-(SHIP:PERIAPSIS + KERBIN:RADIUS))/((SHIP:APOAPSIS + KERBIN:RADIUS)+(SHIP:PERIAPSIS + KERBIN:RADIUS)).
LOCAL STOPBURNING IS 10.
LOCAL NEWECCENTRICITY IS 0.
LOCK THROTTLE TO 1.0.
WAIT 1.
LOCAL CLOSETOCIRC IS FALSE.

UNTIL STOPBURNING <=0{
	SET NEWECCENTRICITY TO ((SHIP:APOAPSIS + KERBIN:RADIUS)-(SHIP:PERIAPSIS + KERBIN:RADIUS))/((SHIP:APOAPSIS + KERBIN:RADIUS)+(SHIP:PERIAPSIS + KERBIN:RADIUS)).
	SET STOPBURNING TO OLDECCENTRICITY - NEWECCENTRICITY. //eccentricity should be decreasing
	SET OLDECCENTRICITY TO NEWECCENTRICITY.

	
    IF CHECKSTAGEREQUIRED{
		PRINT "STAGING.".
		WAIT 1.
		STAGE.
		WAIT 1.
	}
	IF NEWECCENTRICITY < 0.05 AND CLOSETOCIRC = FALSE{
		SET TEMPVECTOR TO CIRCMANOEUVRE:BURNVECTOR.
		LOCK THROTTLE TO 0.5.
		LOCK STEERING TO TEMPVECTOR.
		SET CLOSETOCIRC TO TRUE.  //IF STATEMENT RUNS ONCE ONLY.
	}
	
	WAIT 0.1.  //ALLOWS FOR CHANGE IN STOPBURNING VALUE.
}

LOCK THROTTLE TO 0.0.

WAIT 1.

UNLOCK THROTTLE.

SET THROTTLE TO 0.0.
SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.

PRINT "SECO".

UNLOCK STEERING.

IF SHIP:PERIAPSIS > 70000{
	PRINT "ORBIT REACHED.".
	PRINT "EXTENDING SOLAR PANELS.".
	PANELS ON.
}ELSE{
	PRINT "ERROR!  BURN FINISHED BEFORE STABLE ORBIT REACHED.".
}
REMOVE CIRCMANOEUVRE.